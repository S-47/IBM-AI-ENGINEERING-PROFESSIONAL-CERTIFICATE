{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMggBWiNxqLiEYIxg/7NWYK",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/S-47/IBM-AI-ENGINEERING-PROFESSIONAL-CERTIFICATE/blob/main/MINST%20Dataset%20with%20RBM\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VisnxPlndG5o"
      },
      "outputs": [],
      "source": [
        "import urllib.request\n",
        "with urllib.request.urlopen(\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DL0120EN-SkillsNetwork/labs/Week4/data/utils.py\") as url:\n",
        "    response = url.read()\n",
        "target = open('utils.py', 'w')\n",
        "target.write(response.decode('utf-8'))\n",
        "target.close()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install grpcio==1.24.3\n",
        "!pip install tensorflow==2.2.0\n",
        "!pip install pillow==8.1.0"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "siDdBiK2de2y",
        "outputId": "d76559f9-fa3a-4ce8-fedf-b6645cabda94"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting grpcio==1.24.3\n",
            "  Downloading grpcio-1.24.3-cp38-cp38-manylinux2010_x86_64.whl (2.2 MB)\n",
            "\u001b[K     |████████████████████████████████| 2.2 MB 5.1 MB/s \n",
            "\u001b[?25hRequirement already satisfied: six>=1.5.2 in /usr/local/lib/python3.8/dist-packages (from grpcio==1.24.3) (1.15.0)\n",
            "Installing collected packages: grpcio\n",
            "  Attempting uninstall: grpcio\n",
            "    Found existing installation: grpcio 1.50.0\n",
            "    Uninstalling grpcio-1.50.0:\n",
            "      Successfully uninstalled grpcio-1.50.0\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "grpcio-status 1.48.2 requires grpcio>=1.48.2, but you have grpcio 1.24.3 which is incompatible.\n",
            "google-cloud-bigquery 3.3.6 requires grpcio<2.0dev,>=1.47.0, but you have grpcio 1.24.3 which is incompatible.\u001b[0m\n",
            "Successfully installed grpcio-1.24.3\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting tensorflow==2.2.0\n",
            "  Downloading tensorflow-2.2.0-cp38-cp38-manylinux2010_x86_64.whl (516.3 MB)\n",
            "\u001b[K     |████████████████████████████████| 516.3 MB 3.5 kB/s \n",
            "\u001b[?25hRequirement already satisfied: astunparse==1.6.3 in /usr/local/lib/python3.8/dist-packages (from tensorflow==2.2.0) (1.6.3)\n",
            "Collecting h5py<2.11.0,>=2.10.0\n",
            "  Downloading h5py-2.10.0-cp38-cp38-manylinux1_x86_64.whl (2.9 MB)\n",
            "\u001b[K     |████████████████████████████████| 2.9 MB 42.6 MB/s \n",
            "\u001b[?25hRequirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow==2.2.0) (2.1.1)\n",
            "Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.8/dist-packages (from tensorflow==2.2.0) (0.38.4)\n",
            "Requirement already satisfied: protobuf>=3.8.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow==2.2.0) (3.19.6)\n",
            "Collecting tensorboard<2.3.0,>=2.2.0\n",
            "  Downloading tensorboard-2.2.2-py3-none-any.whl (3.0 MB)\n",
            "\u001b[K     |████████████████████████████████| 3.0 MB 49.6 MB/s \n",
            "\u001b[?25hCollecting gast==0.3.3\n",
            "  Downloading gast-0.3.3-py2.py3-none-any.whl (9.7 kB)\n",
            "Requirement already satisfied: wrapt>=1.11.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow==2.2.0) (1.14.1)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow==2.2.0) (1.15.0)\n",
            "Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow==2.2.0) (1.21.6)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.8/dist-packages (from tensorflow==2.2.0) (3.3.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.8 in /usr/local/lib/python3.8/dist-packages (from tensorflow==2.2.0) (0.2.0)\n",
            "Collecting tensorflow-estimator<2.3.0,>=2.2.0\n",
            "  Downloading tensorflow_estimator-2.2.0-py2.py3-none-any.whl (454 kB)\n",
            "\u001b[K     |████████████████████████████████| 454 kB 90.9 MB/s \n",
            "\u001b[?25hRequirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.8/dist-packages (from tensorflow==2.2.0) (1.24.3)\n",
            "Collecting scipy==1.4.1\n",
            "  Downloading scipy-1.4.1-cp38-cp38-manylinux1_x86_64.whl (26.0 MB)\n",
            "\u001b[K     |████████████████████████████████| 26.0 MB 1.4 MB/s \n",
            "\u001b[?25hRequirement already satisfied: absl-py>=0.7.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow==2.2.0) (1.3.0)\n",
            "Requirement already satisfied: keras-preprocessing>=1.1.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow==2.2.0) (1.1.2)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (3.4.1)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (2.23.0)\n",
            "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (1.8.1)\n",
            "Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (57.4.0)\n",
            "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (0.4.6)\n",
            "Collecting google-auth<2,>=1.6.3\n",
            "  Downloading google_auth-1.35.0-py2.py3-none-any.whl (152 kB)\n",
            "\u001b[K     |████████████████████████████████| 152 kB 73.8 MB/s \n",
            "\u001b[?25hRequirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (1.0.1)\n",
            "Collecting cachetools<5.0,>=2.0.0\n",
            "  Downloading cachetools-4.2.4-py3-none-any.whl (10 kB)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.8/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (0.2.8)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.8/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (4.9)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.8/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (1.3.1)\n",
            "Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.8/dist-packages (from markdown>=2.6.8->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (4.13.0)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.8/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (3.10.0)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.8/dist-packages (from pyasn1-modules>=0.2.1->google-auth<2,>=1.6.3->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (0.4.8)\n",
            "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests<3,>=2.21.0->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (1.24.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests<3,>=2.21.0->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (2022.9.24)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests<3,>=2.21.0->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (2.10)\n",
            "Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests<3,>=2.21.0->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (3.0.4)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.8/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.3.0,>=2.2.0->tensorflow==2.2.0) (3.2.2)\n",
            "Installing collected packages: cachetools, google-auth, tensorflow-estimator, tensorboard, scipy, h5py, gast, tensorflow\n",
            "  Attempting uninstall: cachetools\n",
            "    Found existing installation: cachetools 5.2.0\n",
            "    Uninstalling cachetools-5.2.0:\n",
            "      Successfully uninstalled cachetools-5.2.0\n",
            "  Attempting uninstall: google-auth\n",
            "    Found existing installation: google-auth 2.14.1\n",
            "    Uninstalling google-auth-2.14.1:\n",
            "      Successfully uninstalled google-auth-2.14.1\n",
            "  Attempting uninstall: tensorflow-estimator\n",
            "    Found existing installation: tensorflow-estimator 2.9.0\n",
            "    Uninstalling tensorflow-estimator-2.9.0:\n",
            "      Successfully uninstalled tensorflow-estimator-2.9.0\n",
            "  Attempting uninstall: tensorboard\n",
            "    Found existing installation: tensorboard 2.9.1\n",
            "    Uninstalling tensorboard-2.9.1:\n",
            "      Successfully uninstalled tensorboard-2.9.1\n",
            "  Attempting uninstall: scipy\n",
            "    Found existing installation: scipy 1.7.3\n",
            "    Uninstalling scipy-1.7.3:\n",
            "      Successfully uninstalled scipy-1.7.3\n",
            "  Attempting uninstall: h5py\n",
            "    Found existing installation: h5py 3.1.0\n",
            "    Uninstalling h5py-3.1.0:\n",
            "      Successfully uninstalled h5py-3.1.0\n",
            "  Attempting uninstall: gast\n",
            "    Found existing installation: gast 0.4.0\n",
            "    Uninstalling gast-0.4.0:\n",
            "      Successfully uninstalled gast-0.4.0\n",
            "  Attempting uninstall: tensorflow\n",
            "    Found existing installation: tensorflow 2.9.2\n",
            "    Uninstalling tensorflow-2.9.2:\n",
            "      Successfully uninstalled tensorflow-2.9.2\n",
            "\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
            "plotnine 0.8.0 requires scipy>=1.5.0, but you have scipy 1.4.1 which is incompatible.\n",
            "jaxlib 0.3.25+cuda11.cudnn805 requires scipy>=1.5, but you have scipy 1.4.1 which is incompatible.\n",
            "jax 0.3.25 requires scipy>=1.5, but you have scipy 1.4.1 which is incompatible.\n",
            "google-cloud-bigquery 3.3.6 requires grpcio<2.0dev,>=1.47.0, but you have grpcio 1.24.3 which is incompatible.\u001b[0m\n",
            "Successfully installed cachetools-4.2.4 gast-0.3.3 google-auth-1.35.0 h5py-2.10.0 scipy-1.4.1 tensorboard-2.2.2 tensorflow-2.2.0 tensorflow-estimator-2.2.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "gast",
                  "google",
                  "h5py",
                  "scipy",
                  "tensorboard",
                  "tensorflow"
                ]
              }
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting pillow==8.1.0\n",
            "  Downloading Pillow-8.1.0-cp38-cp38-manylinux1_x86_64.whl (2.2 MB)\n",
            "\u001b[K     |████████████████████████████████| 2.2 MB 5.2 MB/s \n",
            "\u001b[?25hInstalling collected packages: pillow\n",
            "  Attempting uninstall: pillow\n",
            "    Found existing installation: Pillow 7.1.2\n",
            "    Uninstalling Pillow-7.1.2:\n",
            "      Successfully uninstalled Pillow-7.1.2\n",
            "Successfully installed pillow-8.1.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "PIL"
                ]
              }
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from IPython.display import Markdown, display\n",
        "\n",
        "def printmd(string):\n",
        "    display(Markdown('# <span style=\"color:red\">'+string+'</span>'))\n",
        "\n",
        "\n",
        "if not tf.__version__ == '2.2.0':\n",
        "    printmd('<<<<<!!!!! ERROR !!!! please upgrade to TensorFlow 2.2.0, or restart your Kernel (Kernel->Restart & Clear Output)>>>>>')"
      ],
      "metadata": {
        "id": "XjoWebfgdXUz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np\n",
        "\n",
        "from PIL import Image\n",
        "from utils import tile_raster_images\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "4jQ442m0dXYV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "v_bias = tf.Variable(tf.zeros([7]), tf.float32)\n",
        "h_bias = tf.Variable(tf.zeros([2]), tf.float32)"
      ],
      "metadata": {
        "id": "NqGItFCxeD9V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "W = tf.constant(np.random.normal(loc=0.0, scale=1.0, size=(7, 2)).astype(np.float32))"
      ],
      "metadata": {
        "id": "H0XtBSlRdXaU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = tf.constant([[1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]], tf.float32)\n",
        "\n",
        "v_state = X\n",
        "print (\"Input: \", v_state)\n",
        "\n",
        "h_bias = tf.constant([0.1, 0.1])\n",
        "print (\"hb: \", h_bias)\n",
        "print (\"w: \", W)\n",
        "\n",
        "# Calculate the probabilities of turning the hidden units on:\n",
        "h_prob = tf.nn.sigmoid(tf.matmul(v_state, W) + h_bias)  #probabilities of the hidden units\n",
        "print (\"p(h|v): \", h_prob)\n",
        "\n",
        "# Draw samples from the distribution:\n",
        "h_state = tf.nn.relu(tf.sign(h_prob - tf.random.uniform(tf.shape(h_prob)))) #states\n",
        "print (\"h0 states:\", h_state)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AJV5KvjydXdN",
        "outputId": "13b9d5a8-9824-4f7d-cb03-cff6a190afbd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Input:  tf.Tensor([[1. 0. 0. 1. 0. 0. 0.]], shape=(1, 7), dtype=float32)\n",
            "hb:  tf.Tensor([0.1 0.1], shape=(2,), dtype=float32)\n",
            "w:  tf.Tensor(\n",
            "[[ 1.023244   -0.8725222 ]\n",
            " [-1.2935584  -1.0260805 ]\n",
            " [ 1.3640924   0.02857856]\n",
            " [ 0.21255642 -0.07154976]\n",
            " [ 1.4001304   0.13828324]\n",
            " [ 0.97442883 -0.7957403 ]\n",
            " [-0.8960529   1.2754338 ]], shape=(7, 2), dtype=float32)\n",
            "p(h|v):  tf.Tensor([[0.79179853 0.3006779 ]], shape=(1, 2), dtype=float32)\n",
            "h0 states: tf.Tensor([[1. 1.]], shape=(1, 2), dtype=float32)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vb = tf.constant([0.1, 0.2, 0.1, 0.1, 0.1, 0.2, 0.1])\n",
        "print (\"b: \", vb)\n",
        "v_prob = tf.nn.sigmoid(tf.matmul(h_state, tf.transpose(W)) + vb)\n",
        "print (\"p(vi∣h): \", v_prob)\n",
        "v_state = tf.nn.relu(tf.sign(v_prob - tf.random.uniform(tf.shape(v_prob))))\n",
        "print (\"v probability states: \", v_state)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9gLmuyeqdXgL",
        "outputId": "64946388-e609-43b2-d97a-16a806c79456"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "b:  tf.Tensor([0.1 0.2 0.1 0.1 0.1 0.2 0.1], shape=(7,), dtype=float32)\n",
            "p(vi∣h):  tf.Tensor(\n",
            "[[0.56235415 0.10720265 0.81647885 0.5599617  0.83731896 0.59355676\n",
            "  0.6176017 ]], shape=(1, 7), dtype=float32)\n",
            "v probability states:  tf.Tensor([[0. 0. 1. 1. 1. 1. 0.]], shape=(1, 7), dtype=float32)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "inp = X\n",
        "print(\"input X:\" , inp.numpy())\n",
        "\n",
        "print(\"probablity vector:\" , v_prob[0].numpy())\n",
        "v_probability = 1\n",
        "\n",
        "for elm, p in zip(inp[0],v_prob[0]) :\n",
        "    if elm ==1:\n",
        "        v_probability *= p\n",
        "    else:\n",
        "        v_probability *= (1-p)\n",
        "\n",
        "print(\"probability of generating X: \" , v_probability.numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1QWeMEaodXip",
        "outputId": "6ad4cf64-d0de-486d-dce5-46857c115d58"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "input X: [[1. 0. 0. 1. 0. 0. 0.]]\n",
            "probablity vector: [0.56235415 0.10720265 0.81647885 0.5599617  0.83731896 0.59355676\n",
            " 0.6176017 ]\n",
            "probability of generating X:  0.0013045478\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#loading training and test data\n",
        "mnist = tf.keras.datasets.mnist\n",
        "(trX, trY), (teX, teY) = mnist.load_data()\n",
        "\n",
        "# showing an example of the Flatten class and operation\n",
        "from tensorflow.keras.layers import Flatten\n",
        "flatten = Flatten(dtype='float32')\n",
        "trX = flatten(trX/255.0)\n",
        "trY = flatten(trY/255.0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v7qlNDi_eP4e",
        "outputId": "e361a564-ee30-445b-8c0b-9346d81b6c3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11493376/11490434 [==============================] - 0s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vb = tf.Variable(tf.zeros([784]), tf.float32)\n",
        "hb = tf.Variable(tf.zeros([50]), tf.float32)"
      ],
      "metadata": {
        "id": "0IZkNn_weP7r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "W = tf.Variable(tf.zeros([784,50]), tf.float32)"
      ],
      "metadata": {
        "id": "rpa-NxqeeP97"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "v0_state = tf.Variable(tf.zeros([784]), tf.float32)\n",
        "\n",
        "#testing to see if the matrix product works\n",
        "tf.matmul( [v0_state], W)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O4e8yFbZeYEL",
        "outputId": "aaacfa0d-8d32-4f8b-b10c-66b36a5af3a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<tf.Tensor: shape=(1, 50), dtype=float32, numpy=\n",
              "array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0.]], dtype=float32)>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#computing the hidden nodes probability vector and checking shape\n",
        "h0_prob = tf.nn.sigmoid(tf.matmul([v0_state], W) + hb)  #probabilities of the hidden units\n",
        "print(\"h0_state shape: \" , tf.shape(h0_prob))\n",
        "\n",
        "#defining a function to return only the generated hidden states \n",
        "def hidden_layer(v0_state, W, hb):\n",
        "    h0_prob = tf.nn.sigmoid(tf.matmul([v0_state], W) + hb)  #probabilities of the hidden units\n",
        "    h0_state = tf.nn.relu(tf.sign(h0_prob - tf.random.uniform(tf.shape(h0_prob)))) #sample_h_given_X\n",
        "    return h0_state\n",
        "\n",
        "\n",
        "h0_state = hidden_layer(v0_state, W, hb)\n",
        "print(\"first 15 hidden states: \", h0_state[0][0:15])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2HPYAIOxeYHB",
        "outputId": "60815d54-c1c8-4c0e-e52b-7bf740898126"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "h0_state shape:  tf.Tensor([ 1 50], shape=(2,), dtype=int32)\n",
            "first 15 hidden states:  tf.Tensor([0. 1. 0. 0. 1. 0. 1. 1. 1. 1. 0. 0. 0. 0. 1.], shape=(15,), dtype=float32)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def reconstructed_output(h0_state, W, vb):\n",
        "    v1_prob = tf.nn.sigmoid(tf.matmul(h0_state, tf.transpose(W)) + vb) \n",
        "    v1_state = tf.nn.relu(tf.sign(v1_prob - tf.random.uniform(tf.shape(v1_prob)))) #sample_v_given_h\n",
        "    return v1_state[0]\n",
        "\n",
        "v1_state = reconstructed_output(h0_state, W, vb)\n",
        "print(\"hidden state shape: \", h0_state.shape)\n",
        "print(\"v0 state shape:  \", v0_state.shape)\n",
        "print(\"v1 state shape:  \", v1_state.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O10PNNa3eYJ6",
        "outputId": "56368f31-4b7e-4996-a521-b9054ea0cc0d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "hidden state shape:  (1, 50)\n",
            "v0 state shape:   (784,)\n",
            "v1 state shape:   (784,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def error(v0_state, v1_state):\n",
        "    return tf.reduce_mean(tf.square(v0_state - v1_state))\n",
        "\n",
        "err = tf.reduce_mean(tf.square(v0_state - v1_state))\n",
        "print(\"error\" , err.numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QLgozRuAeYM-",
        "outputId": "78417c2d-bf60-49ed-ec00-94622942b7e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "error 0.48086736\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "h1_prob = tf.nn.sigmoid(tf.matmul([v1_state], W) + hb)\n",
        "h1_state = tf.nn.relu(tf.sign(h1_prob - tf.random.uniform(tf.shape(h1_prob)))) #sample_h_given_X"
      ],
      "metadata": {
        "id": "dZmn3gy3eklJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"error: \", error(v0_state, v1_state))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "17x5R17XeluK",
        "outputId": "d55f69da-307f-4790-d6eb-a97376e77e64"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "error:  tf.Tensor(0.48086736, shape=(), dtype=float32)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Parameters\n",
        "alpha = 0.01\n",
        "epochs = 1\n",
        "batchsize = 200\n",
        "weights = []\n",
        "errors = []\n",
        "batch_number = 0\n",
        "K = 1\n",
        "\n",
        "#creating datasets\n",
        "train_ds = \\\n",
        "    tf.data.Dataset.from_tensor_slices((trX, trY)).batch(batchsize)\n",
        "\n",
        "for epoch in range(epochs):\n",
        "    for batch_x, batch_y in train_ds:\n",
        "        batch_number += 1\n",
        "        for i_sample in range(batchsize):           \n",
        "            for k in range(K):\n",
        "                v0_state = batch_x[i_sample]\n",
        "                h0_state = hidden_layer(v0_state, W, hb)\n",
        "                v1_state = reconstructed_output(h0_state, W, vb)\n",
        "                h1_state = hidden_layer(v1_state, W, hb)\n",
        "\n",
        "                delta_W = tf.matmul(tf.transpose([v0_state]), h0_state) - tf.matmul(tf.transpose([v1_state]), h1_state)\n",
        "                W = W + alpha * delta_W\n",
        "\n",
        "                vb = vb + alpha * tf.reduce_mean(v0_state - v1_state, 0)\n",
        "                hb = hb + alpha * tf.reduce_mean(h0_state - h1_state, 0) \n",
        "\n",
        "                v0_state = v1_state\n",
        "\n",
        "            if i_sample == batchsize-1:\n",
        "                err = error(batch_x[i_sample], v1_state)\n",
        "                errors.append(err)\n",
        "                weights.append(W)\n",
        "                print ( 'Epoch: %d' % epoch, \n",
        "                       \"batch #: %i \" % batch_number, \"of %i\" % int(60e3/batchsize), \n",
        "                       \"sample #: %i\" % i_sample,\n",
        "                       'reconstruction error: %f' % err)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tGgJp-RxelxI",
        "outputId": "515373bc-fc0a-48ed-88ea-4078afce372d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch: 0 batch #: 1  of 300 sample #: 199 reconstruction error: 0.175858\n",
            "Epoch: 0 batch #: 2  of 300 sample #: 199 reconstruction error: 0.223222\n",
            "Epoch: 0 batch #: 3  of 300 sample #: 199 reconstruction error: 0.115212\n",
            "Epoch: 0 batch #: 4  of 300 sample #: 199 reconstruction error: 0.114792\n",
            "Epoch: 0 batch #: 5  of 300 sample #: 199 reconstruction error: 0.098987\n",
            "Epoch: 0 batch #: 6  of 300 sample #: 199 reconstruction error: 0.177130\n",
            "Epoch: 0 batch #: 7  of 300 sample #: 199 reconstruction error: 0.086798\n",
            "Epoch: 0 batch #: 8  of 300 sample #: 199 reconstruction error: 0.116878\n",
            "Epoch: 0 batch #: 9  of 300 sample #: 199 reconstruction error: 0.093124\n",
            "Epoch: 0 batch #: 10  of 300 sample #: 199 reconstruction error: 0.161325\n",
            "Epoch: 0 batch #: 11  of 300 sample #: 199 reconstruction error: 0.100735\n",
            "Epoch: 0 batch #: 12  of 300 sample #: 199 reconstruction error: 0.140702\n",
            "Epoch: 0 batch #: 13  of 300 sample #: 199 reconstruction error: 0.061517\n",
            "Epoch: 0 batch #: 14  of 300 sample #: 199 reconstruction error: 0.105033\n",
            "Epoch: 0 batch #: 15  of 300 sample #: 199 reconstruction error: 0.106523\n",
            "Epoch: 0 batch #: 16  of 300 sample #: 199 reconstruction error: 0.104296\n",
            "Epoch: 0 batch #: 17  of 300 sample #: 199 reconstruction error: 0.062147\n",
            "Epoch: 0 batch #: 18  of 300 sample #: 199 reconstruction error: 0.127438\n",
            "Epoch: 0 batch #: 19  of 300 sample #: 199 reconstruction error: 0.140776\n",
            "Epoch: 0 batch #: 20  of 300 sample #: 199 reconstruction error: 0.103397\n",
            "Epoch: 0 batch #: 21  of 300 sample #: 199 reconstruction error: 0.090209\n",
            "Epoch: 0 batch #: 22  of 300 sample #: 199 reconstruction error: 0.087098\n",
            "Epoch: 0 batch #: 23  of 300 sample #: 199 reconstruction error: 0.114256\n",
            "Epoch: 0 batch #: 24  of 300 sample #: 199 reconstruction error: 0.141026\n",
            "Epoch: 0 batch #: 25  of 300 sample #: 199 reconstruction error: 0.087250\n",
            "Epoch: 0 batch #: 26  of 300 sample #: 199 reconstruction error: 0.099907\n",
            "Epoch: 0 batch #: 27  of 300 sample #: 199 reconstruction error: 0.117822\n",
            "Epoch: 0 batch #: 28  of 300 sample #: 199 reconstruction error: 0.084130\n",
            "Epoch: 0 batch #: 29  of 300 sample #: 199 reconstruction error: 0.088101\n",
            "Epoch: 0 batch #: 30  of 300 sample #: 199 reconstruction error: 0.072712\n",
            "Epoch: 0 batch #: 31  of 300 sample #: 199 reconstruction error: 0.094910\n",
            "Epoch: 0 batch #: 32  of 300 sample #: 199 reconstruction error: 0.128558\n",
            "Epoch: 0 batch #: 33  of 300 sample #: 199 reconstruction error: 0.056431\n",
            "Epoch: 0 batch #: 34  of 300 sample #: 199 reconstruction error: 0.067357\n",
            "Epoch: 0 batch #: 35  of 300 sample #: 199 reconstruction error: 0.075806\n",
            "Epoch: 0 batch #: 36  of 300 sample #: 199 reconstruction error: 0.077756\n",
            "Epoch: 0 batch #: 37  of 300 sample #: 199 reconstruction error: 0.061963\n",
            "Epoch: 0 batch #: 38  of 300 sample #: 199 reconstruction error: 0.079842\n",
            "Epoch: 0 batch #: 39  of 300 sample #: 199 reconstruction error: 0.100030\n",
            "Epoch: 0 batch #: 40  of 300 sample #: 199 reconstruction error: 0.105151\n",
            "Epoch: 0 batch #: 41  of 300 sample #: 199 reconstruction error: 0.073596\n",
            "Epoch: 0 batch #: 42  of 300 sample #: 199 reconstruction error: 0.059857\n",
            "Epoch: 0 batch #: 43  of 300 sample #: 199 reconstruction error: 0.122302\n",
            "Epoch: 0 batch #: 44  of 300 sample #: 199 reconstruction error: 0.073046\n",
            "Epoch: 0 batch #: 45  of 300 sample #: 199 reconstruction error: 0.049913\n",
            "Epoch: 0 batch #: 46  of 300 sample #: 199 reconstruction error: 0.043966\n",
            "Epoch: 0 batch #: 47  of 300 sample #: 199 reconstruction error: 0.040730\n",
            "Epoch: 0 batch #: 48  of 300 sample #: 199 reconstruction error: 0.042647\n",
            "Epoch: 0 batch #: 49  of 300 sample #: 199 reconstruction error: 0.133256\n",
            "Epoch: 0 batch #: 50  of 300 sample #: 199 reconstruction error: 0.044730\n",
            "Epoch: 0 batch #: 51  of 300 sample #: 199 reconstruction error: 0.068853\n",
            "Epoch: 0 batch #: 52  of 300 sample #: 199 reconstruction error: 0.023621\n",
            "Epoch: 0 batch #: 53  of 300 sample #: 199 reconstruction error: 0.098089\n",
            "Epoch: 0 batch #: 54  of 300 sample #: 199 reconstruction error: 0.047437\n",
            "Epoch: 0 batch #: 55  of 300 sample #: 199 reconstruction error: 0.109029\n",
            "Epoch: 0 batch #: 56  of 300 sample #: 199 reconstruction error: 0.062078\n",
            "Epoch: 0 batch #: 57  of 300 sample #: 199 reconstruction error: 0.040701\n",
            "Epoch: 0 batch #: 58  of 300 sample #: 199 reconstruction error: 0.085216\n",
            "Epoch: 0 batch #: 59  of 300 sample #: 199 reconstruction error: 0.049318\n",
            "Epoch: 0 batch #: 60  of 300 sample #: 199 reconstruction error: 0.082250\n",
            "Epoch: 0 batch #: 61  of 300 sample #: 199 reconstruction error: 0.057007\n",
            "Epoch: 0 batch #: 62  of 300 sample #: 199 reconstruction error: 0.072860\n",
            "Epoch: 0 batch #: 63  of 300 sample #: 199 reconstruction error: 0.046437\n",
            "Epoch: 0 batch #: 64  of 300 sample #: 199 reconstruction error: 0.098047\n",
            "Epoch: 0 batch #: 65  of 300 sample #: 199 reconstruction error: 0.083679\n",
            "Epoch: 0 batch #: 66  of 300 sample #: 199 reconstruction error: 0.070430\n",
            "Epoch: 0 batch #: 67  of 300 sample #: 199 reconstruction error: 0.047689\n",
            "Epoch: 0 batch #: 68  of 300 sample #: 199 reconstruction error: 0.065694\n",
            "Epoch: 0 batch #: 69  of 300 sample #: 199 reconstruction error: 0.095137\n",
            "Epoch: 0 batch #: 70  of 300 sample #: 199 reconstruction error: 0.079016\n",
            "Epoch: 0 batch #: 71  of 300 sample #: 199 reconstruction error: 0.081047\n",
            "Epoch: 0 batch #: 72  of 300 sample #: 199 reconstruction error: 0.067798\n",
            "Epoch: 0 batch #: 73  of 300 sample #: 199 reconstruction error: 0.080161\n",
            "Epoch: 0 batch #: 74  of 300 sample #: 199 reconstruction error: 0.098471\n",
            "Epoch: 0 batch #: 75  of 300 sample #: 199 reconstruction error: 0.062038\n",
            "Epoch: 0 batch #: 76  of 300 sample #: 199 reconstruction error: 0.060084\n",
            "Epoch: 0 batch #: 77  of 300 sample #: 199 reconstruction error: 0.098938\n",
            "Epoch: 0 batch #: 78  of 300 sample #: 199 reconstruction error: 0.083556\n",
            "Epoch: 0 batch #: 79  of 300 sample #: 199 reconstruction error: 0.107266\n",
            "Epoch: 0 batch #: 80  of 300 sample #: 199 reconstruction error: 0.035622\n",
            "Epoch: 0 batch #: 81  of 300 sample #: 199 reconstruction error: 0.059683\n",
            "Epoch: 0 batch #: 82  of 300 sample #: 199 reconstruction error: 0.048418\n",
            "Epoch: 0 batch #: 83  of 300 sample #: 199 reconstruction error: 0.065120\n",
            "Epoch: 0 batch #: 84  of 300 sample #: 199 reconstruction error: 0.081134\n",
            "Epoch: 0 batch #: 85  of 300 sample #: 199 reconstruction error: 0.047839\n",
            "Epoch: 0 batch #: 86  of 300 sample #: 199 reconstruction error: 0.096083\n",
            "Epoch: 0 batch #: 87  of 300 sample #: 199 reconstruction error: 0.070338\n",
            "Epoch: 0 batch #: 88  of 300 sample #: 199 reconstruction error: 0.027341\n",
            "Epoch: 0 batch #: 89  of 300 sample #: 199 reconstruction error: 0.047378\n",
            "Epoch: 0 batch #: 90  of 300 sample #: 199 reconstruction error: 0.065516\n",
            "Epoch: 0 batch #: 91  of 300 sample #: 199 reconstruction error: 0.063477\n",
            "Epoch: 0 batch #: 92  of 300 sample #: 199 reconstruction error: 0.055004\n",
            "Epoch: 0 batch #: 93  of 300 sample #: 199 reconstruction error: 0.114412\n",
            "Epoch: 0 batch #: 94  of 300 sample #: 199 reconstruction error: 0.108758\n",
            "Epoch: 0 batch #: 95  of 300 sample #: 199 reconstruction error: 0.050124\n",
            "Epoch: 0 batch #: 96  of 300 sample #: 199 reconstruction error: 0.057202\n",
            "Epoch: 0 batch #: 97  of 300 sample #: 199 reconstruction error: 0.090629\n",
            "Epoch: 0 batch #: 98  of 300 sample #: 199 reconstruction error: 0.083047\n",
            "Epoch: 0 batch #: 99  of 300 sample #: 199 reconstruction error: 0.056405\n",
            "Epoch: 0 batch #: 100  of 300 sample #: 199 reconstruction error: 0.108022\n",
            "Epoch: 0 batch #: 101  of 300 sample #: 199 reconstruction error: 0.076488\n",
            "Epoch: 0 batch #: 102  of 300 sample #: 199 reconstruction error: 0.082737\n",
            "Epoch: 0 batch #: 103  of 300 sample #: 199 reconstruction error: 0.085277\n",
            "Epoch: 0 batch #: 104  of 300 sample #: 199 reconstruction error: 0.063009\n",
            "Epoch: 0 batch #: 105  of 300 sample #: 199 reconstruction error: 0.043099\n",
            "Epoch: 0 batch #: 106  of 300 sample #: 199 reconstruction error: 0.105517\n",
            "Epoch: 0 batch #: 107  of 300 sample #: 199 reconstruction error: 0.128214\n",
            "Epoch: 0 batch #: 108  of 300 sample #: 199 reconstruction error: 0.063700\n",
            "Epoch: 0 batch #: 109  of 300 sample #: 199 reconstruction error: 0.107649\n",
            "Epoch: 0 batch #: 110  of 300 sample #: 199 reconstruction error: 0.049573\n",
            "Epoch: 0 batch #: 111  of 300 sample #: 199 reconstruction error: 0.097516\n",
            "Epoch: 0 batch #: 112  of 300 sample #: 199 reconstruction error: 0.029366\n",
            "Epoch: 0 batch #: 113  of 300 sample #: 199 reconstruction error: 0.068232\n",
            "Epoch: 0 batch #: 114  of 300 sample #: 199 reconstruction error: 0.071358\n",
            "Epoch: 0 batch #: 115  of 300 sample #: 199 reconstruction error: 0.053323\n",
            "Epoch: 0 batch #: 116  of 300 sample #: 199 reconstruction error: 0.051565\n",
            "Epoch: 0 batch #: 117  of 300 sample #: 199 reconstruction error: 0.041052\n",
            "Epoch: 0 batch #: 118  of 300 sample #: 199 reconstruction error: 0.072005\n",
            "Epoch: 0 batch #: 119  of 300 sample #: 199 reconstruction error: 0.133887\n",
            "Epoch: 0 batch #: 120  of 300 sample #: 199 reconstruction error: 0.071684\n",
            "Epoch: 0 batch #: 121  of 300 sample #: 199 reconstruction error: 0.053917\n",
            "Epoch: 0 batch #: 122  of 300 sample #: 199 reconstruction error: 0.094415\n",
            "Epoch: 0 batch #: 123  of 300 sample #: 199 reconstruction error: 0.051078\n",
            "Epoch: 0 batch #: 124  of 300 sample #: 199 reconstruction error: 0.059123\n",
            "Epoch: 0 batch #: 125  of 300 sample #: 199 reconstruction error: 0.050578\n",
            "Epoch: 0 batch #: 126  of 300 sample #: 199 reconstruction error: 0.090669\n",
            "Epoch: 0 batch #: 127  of 300 sample #: 199 reconstruction error: 0.086423\n",
            "Epoch: 0 batch #: 128  of 300 sample #: 199 reconstruction error: 0.060203\n",
            "Epoch: 0 batch #: 129  of 300 sample #: 199 reconstruction error: 0.057413\n",
            "Epoch: 0 batch #: 130  of 300 sample #: 199 reconstruction error: 0.080336\n",
            "Epoch: 0 batch #: 131  of 300 sample #: 199 reconstruction error: 0.056084\n",
            "Epoch: 0 batch #: 132  of 300 sample #: 199 reconstruction error: 0.046891\n",
            "Epoch: 0 batch #: 133  of 300 sample #: 199 reconstruction error: 0.060522\n",
            "Epoch: 0 batch #: 134  of 300 sample #: 199 reconstruction error: 0.102250\n",
            "Epoch: 0 batch #: 135  of 300 sample #: 199 reconstruction error: 0.112291\n",
            "Epoch: 0 batch #: 136  of 300 sample #: 199 reconstruction error: 0.107672\n",
            "Epoch: 0 batch #: 137  of 300 sample #: 199 reconstruction error: 0.083532\n",
            "Epoch: 0 batch #: 138  of 300 sample #: 199 reconstruction error: 0.071317\n",
            "Epoch: 0 batch #: 139  of 300 sample #: 199 reconstruction error: 0.100611\n",
            "Epoch: 0 batch #: 140  of 300 sample #: 199 reconstruction error: 0.078252\n",
            "Epoch: 0 batch #: 141  of 300 sample #: 199 reconstruction error: 0.092769\n",
            "Epoch: 0 batch #: 142  of 300 sample #: 199 reconstruction error: 0.068539\n",
            "Epoch: 0 batch #: 143  of 300 sample #: 199 reconstruction error: 0.047413\n",
            "Epoch: 0 batch #: 144  of 300 sample #: 199 reconstruction error: 0.055883\n",
            "Epoch: 0 batch #: 145  of 300 sample #: 199 reconstruction error: 0.094687\n",
            "Epoch: 0 batch #: 146  of 300 sample #: 199 reconstruction error: 0.105070\n",
            "Epoch: 0 batch #: 147  of 300 sample #: 199 reconstruction error: 0.063192\n",
            "Epoch: 0 batch #: 148  of 300 sample #: 199 reconstruction error: 0.076795\n",
            "Epoch: 0 batch #: 149  of 300 sample #: 199 reconstruction error: 0.045493\n",
            "Epoch: 0 batch #: 150  of 300 sample #: 199 reconstruction error: 0.041999\n",
            "Epoch: 0 batch #: 151  of 300 sample #: 199 reconstruction error: 0.090695\n",
            "Epoch: 0 batch #: 152  of 300 sample #: 199 reconstruction error: 0.105258\n",
            "Epoch: 0 batch #: 153  of 300 sample #: 199 reconstruction error: 0.060397\n",
            "Epoch: 0 batch #: 154  of 300 sample #: 199 reconstruction error: 0.060982\n",
            "Epoch: 0 batch #: 155  of 300 sample #: 199 reconstruction error: 0.063613\n",
            "Epoch: 0 batch #: 156  of 300 sample #: 199 reconstruction error: 0.068394\n",
            "Epoch: 0 batch #: 157  of 300 sample #: 199 reconstruction error: 0.091833\n",
            "Epoch: 0 batch #: 158  of 300 sample #: 199 reconstruction error: 0.063732\n",
            "Epoch: 0 batch #: 159  of 300 sample #: 199 reconstruction error: 0.062943\n",
            "Epoch: 0 batch #: 160  of 300 sample #: 199 reconstruction error: 0.063520\n",
            "Epoch: 0 batch #: 161  of 300 sample #: 199 reconstruction error: 0.080724\n",
            "Epoch: 0 batch #: 162  of 300 sample #: 199 reconstruction error: 0.097552\n",
            "Epoch: 0 batch #: 163  of 300 sample #: 199 reconstruction error: 0.031424\n",
            "Epoch: 0 batch #: 164  of 300 sample #: 199 reconstruction error: 0.067606\n",
            "Epoch: 0 batch #: 165  of 300 sample #: 199 reconstruction error: 0.077574\n",
            "Epoch: 0 batch #: 166  of 300 sample #: 199 reconstruction error: 0.054228\n",
            "Epoch: 0 batch #: 167  of 300 sample #: 199 reconstruction error: 0.091711\n",
            "Epoch: 0 batch #: 168  of 300 sample #: 199 reconstruction error: 0.049562\n",
            "Epoch: 0 batch #: 169  of 300 sample #: 199 reconstruction error: 0.030313\n",
            "Epoch: 0 batch #: 170  of 300 sample #: 199 reconstruction error: 0.068187\n",
            "Epoch: 0 batch #: 171  of 300 sample #: 199 reconstruction error: 0.031921\n",
            "Epoch: 0 batch #: 172  of 300 sample #: 199 reconstruction error: 0.062697\n",
            "Epoch: 0 batch #: 173  of 300 sample #: 199 reconstruction error: 0.091401\n",
            "Epoch: 0 batch #: 174  of 300 sample #: 199 reconstruction error: 0.118497\n",
            "Epoch: 0 batch #: 175  of 300 sample #: 199 reconstruction error: 0.066746\n",
            "Epoch: 0 batch #: 176  of 300 sample #: 199 reconstruction error: 0.045026\n",
            "Epoch: 0 batch #: 177  of 300 sample #: 199 reconstruction error: 0.034041\n",
            "Epoch: 0 batch #: 178  of 300 sample #: 199 reconstruction error: 0.112908\n",
            "Epoch: 0 batch #: 179  of 300 sample #: 199 reconstruction error: 0.062919\n",
            "Epoch: 0 batch #: 180  of 300 sample #: 199 reconstruction error: 0.093985\n",
            "Epoch: 0 batch #: 181  of 300 sample #: 199 reconstruction error: 0.100244\n",
            "Epoch: 0 batch #: 182  of 300 sample #: 199 reconstruction error: 0.087511\n",
            "Epoch: 0 batch #: 183  of 300 sample #: 199 reconstruction error: 0.114336\n",
            "Epoch: 0 batch #: 184  of 300 sample #: 199 reconstruction error: 0.055405\n",
            "Epoch: 0 batch #: 185  of 300 sample #: 199 reconstruction error: 0.068356\n",
            "Epoch: 0 batch #: 186  of 300 sample #: 199 reconstruction error: 0.103234\n",
            "Epoch: 0 batch #: 187  of 300 sample #: 199 reconstruction error: 0.065531\n",
            "Epoch: 0 batch #: 188  of 300 sample #: 199 reconstruction error: 0.116432\n",
            "Epoch: 0 batch #: 189  of 300 sample #: 199 reconstruction error: 0.083704\n",
            "Epoch: 0 batch #: 190  of 300 sample #: 199 reconstruction error: 0.051964\n",
            "Epoch: 0 batch #: 191  of 300 sample #: 199 reconstruction error: 0.100136\n",
            "Epoch: 0 batch #: 192  of 300 sample #: 199 reconstruction error: 0.112116\n",
            "Epoch: 0 batch #: 193  of 300 sample #: 199 reconstruction error: 0.099937\n",
            "Epoch: 0 batch #: 194  of 300 sample #: 199 reconstruction error: 0.089043\n",
            "Epoch: 0 batch #: 195  of 300 sample #: 199 reconstruction error: 0.051260\n",
            "Epoch: 0 batch #: 196  of 300 sample #: 199 reconstruction error: 0.041496\n",
            "Epoch: 0 batch #: 197  of 300 sample #: 199 reconstruction error: 0.046912\n",
            "Epoch: 0 batch #: 198  of 300 sample #: 199 reconstruction error: 0.082341\n",
            "Epoch: 0 batch #: 199  of 300 sample #: 199 reconstruction error: 0.080439\n",
            "Epoch: 0 batch #: 200  of 300 sample #: 199 reconstruction error: 0.132663\n",
            "Epoch: 0 batch #: 201  of 300 sample #: 199 reconstruction error: 0.086356\n",
            "Epoch: 0 batch #: 202  of 300 sample #: 199 reconstruction error: 0.030604\n",
            "Epoch: 0 batch #: 203  of 300 sample #: 199 reconstruction error: 0.101926\n",
            "Epoch: 0 batch #: 204  of 300 sample #: 199 reconstruction error: 0.058452\n",
            "Epoch: 0 batch #: 205  of 300 sample #: 199 reconstruction error: 0.025247\n",
            "Epoch: 0 batch #: 206  of 300 sample #: 199 reconstruction error: 0.078488\n",
            "Epoch: 0 batch #: 207  of 300 sample #: 199 reconstruction error: 0.080422\n",
            "Epoch: 0 batch #: 208  of 300 sample #: 199 reconstruction error: 0.052624\n",
            "Epoch: 0 batch #: 209  of 300 sample #: 199 reconstruction error: 0.039499\n",
            "Epoch: 0 batch #: 210  of 300 sample #: 199 reconstruction error: 0.124037\n",
            "Epoch: 0 batch #: 211  of 300 sample #: 199 reconstruction error: 0.096851\n",
            "Epoch: 0 batch #: 212  of 300 sample #: 199 reconstruction error: 0.087443\n",
            "Epoch: 0 batch #: 213  of 300 sample #: 199 reconstruction error: 0.099672\n",
            "Epoch: 0 batch #: 214  of 300 sample #: 199 reconstruction error: 0.094030\n",
            "Epoch: 0 batch #: 215  of 300 sample #: 199 reconstruction error: 0.035530\n",
            "Epoch: 0 batch #: 216  of 300 sample #: 199 reconstruction error: 0.100862\n",
            "Epoch: 0 batch #: 217  of 300 sample #: 199 reconstruction error: 0.076059\n",
            "Epoch: 0 batch #: 218  of 300 sample #: 199 reconstruction error: 0.060593\n",
            "Epoch: 0 batch #: 219  of 300 sample #: 199 reconstruction error: 0.076863\n",
            "Epoch: 0 batch #: 220  of 300 sample #: 199 reconstruction error: 0.059851\n",
            "Epoch: 0 batch #: 221  of 300 sample #: 199 reconstruction error: 0.100518\n",
            "Epoch: 0 batch #: 222  of 300 sample #: 199 reconstruction error: 0.083895\n",
            "Epoch: 0 batch #: 223  of 300 sample #: 199 reconstruction error: 0.068551\n",
            "Epoch: 0 batch #: 224  of 300 sample #: 199 reconstruction error: 0.081318\n",
            "Epoch: 0 batch #: 225  of 300 sample #: 199 reconstruction error: 0.083428\n",
            "Epoch: 0 batch #: 226  of 300 sample #: 199 reconstruction error: 0.143358\n",
            "Epoch: 0 batch #: 227  of 300 sample #: 199 reconstruction error: 0.087765\n",
            "Epoch: 0 batch #: 228  of 300 sample #: 199 reconstruction error: 0.080916\n",
            "Epoch: 0 batch #: 229  of 300 sample #: 199 reconstruction error: 0.074289\n",
            "Epoch: 0 batch #: 230  of 300 sample #: 199 reconstruction error: 0.028331\n",
            "Epoch: 0 batch #: 231  of 300 sample #: 199 reconstruction error: 0.021143\n",
            "Epoch: 0 batch #: 232  of 300 sample #: 199 reconstruction error: 0.067273\n",
            "Epoch: 0 batch #: 233  of 300 sample #: 199 reconstruction error: 0.073516\n",
            "Epoch: 0 batch #: 234  of 300 sample #: 199 reconstruction error: 0.068383\n",
            "Epoch: 0 batch #: 235  of 300 sample #: 199 reconstruction error: 0.065043\n",
            "Epoch: 0 batch #: 236  of 300 sample #: 199 reconstruction error: 0.100847\n",
            "Epoch: 0 batch #: 237  of 300 sample #: 199 reconstruction error: 0.087643\n",
            "Epoch: 0 batch #: 238  of 300 sample #: 199 reconstruction error: 0.096653\n",
            "Epoch: 0 batch #: 239  of 300 sample #: 199 reconstruction error: 0.028620\n",
            "Epoch: 0 batch #: 240  of 300 sample #: 199 reconstruction error: 0.102648\n",
            "Epoch: 0 batch #: 241  of 300 sample #: 199 reconstruction error: 0.087818\n",
            "Epoch: 0 batch #: 242  of 300 sample #: 199 reconstruction error: 0.077758\n",
            "Epoch: 0 batch #: 243  of 300 sample #: 199 reconstruction error: 0.071345\n",
            "Epoch: 0 batch #: 244  of 300 sample #: 199 reconstruction error: 0.083544\n",
            "Epoch: 0 batch #: 245  of 300 sample #: 199 reconstruction error: 0.064294\n",
            "Epoch: 0 batch #: 246  of 300 sample #: 199 reconstruction error: 0.089805\n",
            "Epoch: 0 batch #: 247  of 300 sample #: 199 reconstruction error: 0.060621\n",
            "Epoch: 0 batch #: 248  of 300 sample #: 199 reconstruction error: 0.076566\n",
            "Epoch: 0 batch #: 249  of 300 sample #: 199 reconstruction error: 0.056450\n",
            "Epoch: 0 batch #: 250  of 300 sample #: 199 reconstruction error: 0.090272\n",
            "Epoch: 0 batch #: 251  of 300 sample #: 199 reconstruction error: 0.054784\n",
            "Epoch: 0 batch #: 252  of 300 sample #: 199 reconstruction error: 0.077990\n",
            "Epoch: 0 batch #: 253  of 300 sample #: 199 reconstruction error: 0.046711\n",
            "Epoch: 0 batch #: 254  of 300 sample #: 199 reconstruction error: 0.030423\n",
            "Epoch: 0 batch #: 255  of 300 sample #: 199 reconstruction error: 0.054257\n",
            "Epoch: 0 batch #: 256  of 300 sample #: 199 reconstruction error: 0.076219\n",
            "Epoch: 0 batch #: 257  of 300 sample #: 199 reconstruction error: 0.094565\n",
            "Epoch: 0 batch #: 258  of 300 sample #: 199 reconstruction error: 0.086953\n",
            "Epoch: 0 batch #: 259  of 300 sample #: 199 reconstruction error: 0.058837\n",
            "Epoch: 0 batch #: 260  of 300 sample #: 199 reconstruction error: 0.107147\n",
            "Epoch: 0 batch #: 261  of 300 sample #: 199 reconstruction error: 0.037928\n",
            "Epoch: 0 batch #: 262  of 300 sample #: 199 reconstruction error: 0.040448\n",
            "Epoch: 0 batch #: 263  of 300 sample #: 199 reconstruction error: 0.076066\n",
            "Epoch: 0 batch #: 264  of 300 sample #: 199 reconstruction error: 0.061649\n",
            "Epoch: 0 batch #: 265  of 300 sample #: 199 reconstruction error: 0.058854\n",
            "Epoch: 0 batch #: 266  of 300 sample #: 199 reconstruction error: 0.031087\n",
            "Epoch: 0 batch #: 267  of 300 sample #: 199 reconstruction error: 0.066866\n",
            "Epoch: 0 batch #: 268  of 300 sample #: 199 reconstruction error: 0.022934\n",
            "Epoch: 0 batch #: 269  of 300 sample #: 199 reconstruction error: 0.100998\n",
            "Epoch: 0 batch #: 270  of 300 sample #: 199 reconstruction error: 0.085988\n",
            "Epoch: 0 batch #: 271  of 300 sample #: 199 reconstruction error: 0.051296\n",
            "Epoch: 0 batch #: 272  of 300 sample #: 199 reconstruction error: 0.053633\n",
            "Epoch: 0 batch #: 273  of 300 sample #: 199 reconstruction error: 0.045274\n",
            "Epoch: 0 batch #: 274  of 300 sample #: 199 reconstruction error: 0.066776\n",
            "Epoch: 0 batch #: 275  of 300 sample #: 199 reconstruction error: 0.093724\n",
            "Epoch: 0 batch #: 276  of 300 sample #: 199 reconstruction error: 0.090483\n",
            "Epoch: 0 batch #: 277  of 300 sample #: 199 reconstruction error: 0.063275\n",
            "Epoch: 0 batch #: 278  of 300 sample #: 199 reconstruction error: 0.064627\n",
            "Epoch: 0 batch #: 279  of 300 sample #: 199 reconstruction error: 0.046964\n",
            "Epoch: 0 batch #: 280  of 300 sample #: 199 reconstruction error: 0.081696\n",
            "Epoch: 0 batch #: 281  of 300 sample #: 199 reconstruction error: 0.066806\n",
            "Epoch: 0 batch #: 282  of 300 sample #: 199 reconstruction error: 0.096677\n",
            "Epoch: 0 batch #: 283  of 300 sample #: 199 reconstruction error: 0.062638\n",
            "Epoch: 0 batch #: 284  of 300 sample #: 199 reconstruction error: 0.044700\n",
            "Epoch: 0 batch #: 285  of 300 sample #: 199 reconstruction error: 0.059793\n",
            "Epoch: 0 batch #: 286  of 300 sample #: 199 reconstruction error: 0.078597\n",
            "Epoch: 0 batch #: 287  of 300 sample #: 199 reconstruction error: 0.071119\n",
            "Epoch: 0 batch #: 288  of 300 sample #: 199 reconstruction error: 0.024126\n",
            "Epoch: 0 batch #: 289  of 300 sample #: 199 reconstruction error: 0.081060\n",
            "Epoch: 0 batch #: 290  of 300 sample #: 199 reconstruction error: 0.090576\n",
            "Epoch: 0 batch #: 291  of 300 sample #: 199 reconstruction error: 0.106933\n",
            "Epoch: 0 batch #: 292  of 300 sample #: 199 reconstruction error: 0.071152\n",
            "Epoch: 0 batch #: 293  of 300 sample #: 199 reconstruction error: 0.067670\n",
            "Epoch: 0 batch #: 294  of 300 sample #: 199 reconstruction error: 0.083507\n",
            "Epoch: 0 batch #: 295  of 300 sample #: 199 reconstruction error: 0.069310\n",
            "Epoch: 0 batch #: 296  of 300 sample #: 199 reconstruction error: 0.023252\n",
            "Epoch: 0 batch #: 297  of 300 sample #: 199 reconstruction error: 0.114055\n",
            "Epoch: 0 batch #: 298  of 300 sample #: 199 reconstruction error: 0.041683\n",
            "Epoch: 0 batch #: 299  of 300 sample #: 199 reconstruction error: 0.046339\n",
            "Epoch: 0 batch #: 300  of 300 sample #: 199 reconstruction error: 0.085786\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(errors)\n",
        "plt.xlabel(\"Batch Number\")\n",
        "plt.ylabel(\"Error\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "WcbisYdhelzq",
        "outputId": "232ce1cf-1898-41fc-a29e-6409d209fa9b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(W.numpy()) # a weight matrix of shape (50,784)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QCBYl0V7el26",
        "outputId": "9c14d3ac-0e03-438e-b1d4-63d3f4c2426c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[-0.42999986 -0.32999995 -0.29       ... -0.3799999  -0.26000002\n",
            "  -0.28      ]\n",
            " [-0.41999987 -0.29       -0.20000002 ... -0.35999992 -0.16\n",
            "  -0.22000003]\n",
            " [-0.41999987 -0.34999993 -0.23000003 ... -0.34999993 -0.27\n",
            "  -0.16      ]\n",
            " ...\n",
            " [-0.46999982 -0.23000003 -0.19000001 ... -0.44999984 -0.18\n",
            "  -0.23000003]\n",
            " [-0.5199998  -0.3899999  -0.22000003 ... -0.31999996 -0.29999998\n",
            "  -0.20000002]\n",
            " [-0.43999985 -0.32999995 -0.21000002 ... -0.3999999  -0.26000002\n",
            "  -0.20000002]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tile_raster_images(X=W.numpy().T, img_shape=(28, 28), tile_shape=(5, 10), tile_spacing=(1, 1))\n",
        "import matplotlib.pyplot as plt\n",
        "from PIL import Image\n",
        "%matplotlib inline\n",
        "image = Image.fromarray(tile_raster_images(X=W.numpy().T, img_shape=(28, 28) ,tile_shape=(5, 10), tile_spacing=(1, 1)))\n",
        "### Plot image\n",
        "plt.rcParams['figure.figsize'] = (18.0, 18.0)\n",
        "imgplot = plt.imshow(image)\n",
        "imgplot.set_cmap('gray')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "id": "Cceow7mSel5R",
        "outputId": "5411a7d4-36fc-420e-ee8c-1e370a1aba05"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1296x1296 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from PIL import Image\n",
        "image = Image.fromarray(tile_raster_images(X =W.numpy().T[10:11], img_shape=(28, 28),tile_shape=(1, 1), tile_spacing=(1, 1)))\n",
        "### Plot image\n",
        "plt.rcParams['figure.figsize'] = (4.0, 4.0)\n",
        "imgplot = plt.imshow(image)\n",
        "imgplot.set_cmap('gray')  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "qAxcd2-6el72",
        "outputId": "50f16dee-8339-4bc2-b927-d906927893fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!wget -O destructed3.jpg  https://ibm.box.com/shared/static/vvm1b63uvuxq88vbw9znpwu5ol380mco.jpg\n",
        "img = Image.open('destructed3.jpg')\n",
        "img"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 652
        },
        "id": "syEjnHAnfOIS",
        "outputId": "8dd9fecb-f752-4152-9e03-ea82c6b07aa4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2022-12-01 16:20:28--  https://ibm.box.com/shared/static/vvm1b63uvuxq88vbw9znpwu5ol380mco.jpg\n",
            "Resolving ibm.box.com (ibm.box.com)... 74.112.186.144\n",
            "Connecting to ibm.box.com (ibm.box.com)|74.112.186.144|:443... connected.\n",
            "HTTP request sent, awaiting response... 301 Moved Permanently\n",
            "Location: /public/static/vvm1b63uvuxq88vbw9znpwu5ol380mco.jpg [following]\n",
            "--2022-12-01 16:20:28--  https://ibm.box.com/public/static/vvm1b63uvuxq88vbw9znpwu5ol380mco.jpg\n",
            "Reusing existing connection to ibm.box.com:443.\n",
            "HTTP request sent, awaiting response... 301 Moved Permanently\n",
            "Location: https://ibm.ent.box.com/public/static/vvm1b63uvuxq88vbw9znpwu5ol380mco.jpg [following]\n",
            "--2022-12-01 16:20:28--  https://ibm.ent.box.com/public/static/vvm1b63uvuxq88vbw9znpwu5ol380mco.jpg\n",
            "Resolving ibm.ent.box.com (ibm.ent.box.com)... 74.112.186.144\n",
            "Connecting to ibm.ent.box.com (ibm.ent.box.com)|74.112.186.144|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://dl2.boxcloud.com/d/1/b1!fzB33R1_xqJTUoiIheVV0kEe1G00UvDXMHGhabMm7kGEsSXNtGdzNkwJwe8SCAqnRNpcJgARCOdNrO-ijcvt0fZMHrPXjpivuB-7h1Eo17WqOQuvXPjFQGoAhd39M6n0vqPfuEMwAGHp_1_Sx-aNxmx8FTM3wVPsyo4veGCPGLG6JI1598rcbreqzRM0LlvuWnqsexlJEkOKZDbcmf4ZL5-V5u9TZIGfTiKP06uanDklnVNydTDWMS6zHTHSNQN1PPfp89smef53bIf8jYVwPT3T7YbusxVEFh_o-OHu8JRC0NnbeDJl0RHzn796GiJruJlQ-C12gTo_cDLi70ZF2Q9NU0NMa96TrGfV4456D8-xIHd4DBryNtTE00qif09spLShK-M1pS3TCbxvDe0-3sFFsy4PRZ-vgvjhzW8SfOrD7j0fs1RWs93iPu1XDkVPgRu38uKmMeDBxIjPIMe1Fth7XG9-flywEC1lW56KWvUn61Ib9I4C3ehni_pUxbIdeRZtU3_14ViceWgJFecV-ujo2dbHDUwzB4hwTxMadlQ7MrHB9v1jeHYNDdXORFw0M8umEX9hRBGNEyHXIMK-v6wqqgqmlKmJ9V2b67VBLW0YFTsBCeDi246KQpMTaAy761wjnFzKvwT-M78toX7nj6Vbvm3YQ9z7q7XhoyDvWrimbvCXBtc1WL71wqet8tTH2s1rw91jC32AFQ91X5gRpH__KifC0QsVcDlj-Ochlf0q_52WD8tlvLJkbGOfZ0HP-1QkKmj9adN5ns4Tg6C-gtC4dSddUJaMwF8rTjBg-2aQiU3UB6MV1QW_tTZP6CFWt3gFnWUgS48y3Zjkic_t5YbGVpfqD04M3xpFQTnQ-xj-NDFWRjBupKO6TcouIqJsrdQut0W3tQaNjBOBI71qRiu3onROGU7lAdaUBmQJdpxBIabLck6G4e505a6KTv6oIJ9qpusz_KyfLTsWrAvHsleHUNvqslKhey2YQ-v_-oI9sTYzqG3LyDgaIyMciEDrlvfcbh3Ej-rJOMtG_uV4DJKg-pFOZkEF6aY3NbKS_Cy_lc6lscnRpGcaw3u01_FXR7UivTTbSG-wwGlzOMvoPxkz_FxddB7XXWVTMedxucNuyR7M49B5NPXXHNSaiZy1hon20CVFQoh3SnxitrTy1IzhgWDq67CLx4_bDY9KaZEZr_0rQ9XefUu5krpdbBmwS3Su-xHFw7YcOzD-twrDe6sUkdwIBet8Bd6HKqsVMsvSlpk-eTJ4tlMEMrNyhnnMFv-nyoT_tPXc_VQ3D9LQtpoLUOTtkzyN2MGM5CV6i8iiOc1glpq36l0PTUEJQxyLVc7EhBy-4-PMH5dPwD0YF5tEEdEZ_I3iIKtAQi2hZYGbfpnnxyK0SPhNgjH0BQ_7CeXIltiFNTQriY0Xi7hx45zM/download [following]\n",
            "--2022-12-01 16:20:30--  https://dl2.boxcloud.com/d/1/b1!fzB33R1_xqJTUoiIheVV0kEe1G00UvDXMHGhabMm7kGEsSXNtGdzNkwJwe8SCAqnRNpcJgARCOdNrO-ijcvt0fZMHrPXjpivuB-7h1Eo17WqOQuvXPjFQGoAhd39M6n0vqPfuEMwAGHp_1_Sx-aNxmx8FTM3wVPsyo4veGCPGLG6JI1598rcbreqzRM0LlvuWnqsexlJEkOKZDbcmf4ZL5-V5u9TZIGfTiKP06uanDklnVNydTDWMS6zHTHSNQN1PPfp89smef53bIf8jYVwPT3T7YbusxVEFh_o-OHu8JRC0NnbeDJl0RHzn796GiJruJlQ-C12gTo_cDLi70ZF2Q9NU0NMa96TrGfV4456D8-xIHd4DBryNtTE00qif09spLShK-M1pS3TCbxvDe0-3sFFsy4PRZ-vgvjhzW8SfOrD7j0fs1RWs93iPu1XDkVPgRu38uKmMeDBxIjPIMe1Fth7XG9-flywEC1lW56KWvUn61Ib9I4C3ehni_pUxbIdeRZtU3_14ViceWgJFecV-ujo2dbHDUwzB4hwTxMadlQ7MrHB9v1jeHYNDdXORFw0M8umEX9hRBGNEyHXIMK-v6wqqgqmlKmJ9V2b67VBLW0YFTsBCeDi246KQpMTaAy761wjnFzKvwT-M78toX7nj6Vbvm3YQ9z7q7XhoyDvWrimbvCXBtc1WL71wqet8tTH2s1rw91jC32AFQ91X5gRpH__KifC0QsVcDlj-Ochlf0q_52WD8tlvLJkbGOfZ0HP-1QkKmj9adN5ns4Tg6C-gtC4dSddUJaMwF8rTjBg-2aQiU3UB6MV1QW_tTZP6CFWt3gFnWUgS48y3Zjkic_t5YbGVpfqD04M3xpFQTnQ-xj-NDFWRjBupKO6TcouIqJsrdQut0W3tQaNjBOBI71qRiu3onROGU7lAdaUBmQJdpxBIabLck6G4e505a6KTv6oIJ9qpusz_KyfLTsWrAvHsleHUNvqslKhey2YQ-v_-oI9sTYzqG3LyDgaIyMciEDrlvfcbh3Ej-rJOMtG_uV4DJKg-pFOZkEF6aY3NbKS_Cy_lc6lscnRpGcaw3u01_FXR7UivTTbSG-wwGlzOMvoPxkz_FxddB7XXWVTMedxucNuyR7M49B5NPXXHNSaiZy1hon20CVFQoh3SnxitrTy1IzhgWDq67CLx4_bDY9KaZEZr_0rQ9XefUu5krpdbBmwS3Su-xHFw7YcOzD-twrDe6sUkdwIBet8Bd6HKqsVMsvSlpk-eTJ4tlMEMrNyhnnMFv-nyoT_tPXc_VQ3D9LQtpoLUOTtkzyN2MGM5CV6i8iiOc1glpq36l0PTUEJQxyLVc7EhBy-4-PMH5dPwD0YF5tEEdEZ_I3iIKtAQi2hZYGbfpnnxyK0SPhNgjH0BQ_7CeXIltiFNTQriY0Xi7hx45zM/download\n",
            "Resolving dl2.boxcloud.com (dl2.boxcloud.com)... 74.112.186.128\n",
            "Connecting to dl2.boxcloud.com (dl2.boxcloud.com)|74.112.186.128|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 24383 (24K) [image/jpeg]\n",
            "Saving to: ‘destructed3.jpg’\n",
            "\n",
            "destructed3.jpg     100%[===================>]  23.81K  --.-KB/s    in 0.03s   \n",
            "\n",
            "2022-12-01 16:20:30 (691 KB/s) - ‘destructed3.jpg’ saved [24383/24383]\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=181x181 at 0x7F2DCFC141C0>"
            ],
            "image/png": "\n"
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# convert the image to a 1d numpy array\n",
        "sample_case = np.array(img.convert('I').resize((28,28))).ravel().reshape((1, -1))/255.0\n",
        "\n",
        "sample_case = tf.cast(sample_case, dtype=tf.float32)"
      ],
      "metadata": {
        "id": "GBCQhOkRfOMw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "hh0_p = tf.nn.sigmoid(tf.matmul(sample_case, W) + hb)\n",
        "hh0_s = tf.round(hh0_p)\n",
        "\n",
        "print(\"Probability nodes in hidden layer:\" ,hh0_p)\n",
        "print(\"activated nodes in hidden layer:\" ,hh0_s)\n",
        "\n",
        "# reconstruct\n",
        "vv1_p = tf.nn.sigmoid(tf.matmul(hh0_s, tf.transpose(W)) + vb)\n",
        "\n",
        "print(vv1_p)\n",
        "#rec_prob = sess.run(vv1_p, feed_dict={ hh0_s: hh0_s_val, W: prv_w, vb: prv_vb})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Kj1Ls9EfORm",
        "outputId": "459c27f3-bb06-4e0d-fdd3-a077cc84bd3b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Probability nodes in hidden layer: tf.Tensor(\n",
            "[[1.09666616e-01 1.07772692e-07 3.96967828e-02 3.94046689e-16\n",
            "  1.42192126e-11 4.07675884e-07 5.57249784e-03 7.26437569e-03\n",
            "  9.97948170e-01 8.46208770e-10 2.01135874e-04 2.79085487e-01\n",
            "  6.73827946e-01 9.99985039e-01 6.44505024e-04 3.92273531e-18\n",
            "  2.97912121e-01 2.09021760e-08 1.06204743e-06 7.94366684e-10\n",
            "  1.35776655e-12 9.49130367e-07 1.00000000e+00 1.00000000e+00\n",
            "  1.51255131e-01 2.40027905e-04 6.18258476e-01 5.68836927e-04\n",
            "  1.03857786e-13 9.99999881e-01 9.99993742e-01 1.00000000e+00\n",
            "  9.99890924e-01 5.71522517e-11 9.99929309e-01 6.41670582e-13\n",
            "  1.83338877e-09 1.46800124e-11 7.51681881e-08 8.66554439e-01\n",
            "  2.09143758e-03 1.00000000e+00 1.00000000e+00 2.83841266e-12\n",
            "  5.25553107e-01 9.99381661e-01 7.53292023e-16 9.99999404e-01\n",
            "  5.00586858e-15 2.75436030e-08]], shape=(1, 50), dtype=float32)\n",
            "activated nodes in hidden layer: tf.Tensor(\n",
            "[[0. 0. 0. 0. 0. 0. 0. 0. 1. 0. 0. 0. 1. 1. 0. 0. 0. 0. 0. 0. 0. 0. 1. 1.\n",
            "  0. 0. 1. 0. 0. 1. 1. 1. 1. 0. 1. 0. 0. 0. 0. 1. 0. 1. 1. 0. 1. 1. 0. 1.\n",
            "  0. 0.]], shape=(1, 50), dtype=float32)\n",
            "tf.Tensor(\n",
            "[[3.71456146e-04 2.41667032e-04 5.11378050e-04 3.90440226e-04\n",
            "  3.71456146e-04 2.14338303e-04 4.96238470e-04 4.40210104e-04\n",
            "  2.34484673e-04 3.26275826e-04 3.78966331e-04 3.32742929e-04\n",
            "  3.60399485e-04 4.35382128e-04 3.16262245e-04 3.54200602e-04\n",
            "  3.42965126e-04 2.67088413e-04 3.49879265e-04 4.62740660e-04\n",
            "  4.62740660e-04 3.01063061e-04 3.67701054e-04 4.22924757e-04\n",
            "  2.80737877e-04 2.67088413e-04 2.59190798e-04 3.82721424e-04\n",
            "  3.78966331e-04 2.80797482e-04 3.29464674e-04 2.77936459e-04\n",
            "  3.54617834e-04 2.70247459e-04 3.96549702e-04 3.00049782e-04\n",
            "  3.52621078e-04 3.59028578e-04 2.81900167e-04 3.87430191e-04\n",
            "  4.86433506e-04 4.86791134e-04 3.97026539e-04 4.11659479e-04\n",
            "  5.53846359e-04 9.65654850e-04 6.76810741e-04 3.11404467e-04\n",
            "  5.02586365e-04 4.18037176e-04 3.35037708e-04 3.36736441e-04\n",
            "  5.16563654e-04 3.71456146e-04 3.46273184e-04 3.82661819e-04\n",
            "  3.67701054e-04 4.31537628e-04 4.49150801e-04 4.59074974e-04\n",
            "  3.26156616e-04 3.57836485e-04 2.83926725e-04 3.72678041e-04\n",
            "  2.14695930e-04 1.46120787e-04 1.00106190e-04 8.86785128e-05\n",
            "  1.12781381e-04 1.63346529e-04 2.60204077e-04 4.91380692e-04\n",
            "  3.87459993e-04 3.67969275e-04 4.22716141e-04 1.34646893e-04\n",
            "  3.23742628e-04 4.91410494e-04 8.45164061e-04 3.68982553e-04\n",
            "  5.67734241e-04 3.74048948e-04 2.36809254e-04 4.10467386e-04\n",
            "  3.36140394e-04 6.06030226e-04 2.12818384e-04 2.63482332e-04\n",
            "  4.83512878e-04 6.52760267e-04 5.33372164e-04 4.48703766e-04\n",
            "  4.06503677e-04 2.55107880e-04 1.76131725e-04 1.68502331e-04\n",
            "  2.44975090e-04 9.35524702e-04 8.35478306e-04 2.02527642e-03\n",
            "  1.85221434e-03 1.02049112e-03 8.07613134e-04 6.03318214e-04\n",
            "  2.12252140e-04 2.44766474e-04 2.55644321e-04 5.21570444e-04\n",
            "  7.26699829e-04 3.22461128e-04 3.16768885e-04 3.78847122e-04\n",
            "  3.01063061e-04 2.18540430e-04 4.46408987e-04 4.70787287e-04\n",
            "  6.10560179e-04 1.33121014e-03 1.23238564e-03 1.48510933e-03\n",
            "  1.27172470e-03 1.23825669e-03 1.09046698e-03 1.74427032e-03\n",
            "  3.67909670e-03 7.16602802e-03 2.36006677e-02 7.66235888e-02\n",
            "  7.32341707e-02 7.53842592e-02 1.87278688e-02 7.21979141e-03\n",
            "  2.36964226e-03 1.47223473e-03 2.27537751e-03 4.23225760e-03\n",
            "  1.93476677e-03 8.46445560e-04 3.77982855e-04 2.58713961e-04\n",
            "  3.29464674e-04 4.22954559e-04 2.78472900e-04 3.89367342e-04\n",
            "  1.57031417e-03 3.07303667e-03 6.33373857e-03 7.03185797e-03\n",
            "  7.32406974e-03 8.13665986e-03 1.06232464e-02 1.90797448e-02\n",
            "  8.41830969e-02 2.63422489e-01 5.16930342e-01 8.36820364e-01\n",
            "  9.09196377e-01 8.04123282e-01 5.54053187e-01 3.90993446e-01\n",
            "  1.99136913e-01 3.18968892e-02 1.21091306e-02 1.00893974e-02\n",
            "  2.55733728e-03 2.33983994e-03 9.08166170e-04 2.86310911e-04\n",
            "  4.62740660e-04 2.40683556e-04 5.29378653e-04 1.24859810e-03\n",
            "  3.85031104e-03 1.29725933e-02 1.30860806e-02 1.85686052e-02\n",
            "  2.23476887e-02 1.49832070e-02 4.17609513e-02 3.06904525e-01\n",
            "  7.31159687e-01 9.14195776e-01 9.72364187e-01 9.72253919e-01\n",
            "  9.63650107e-01 9.47726846e-01 9.12219167e-01 9.10085201e-01\n",
            "  5.55514753e-01 2.32805341e-01 8.18189979e-02 9.25475359e-03\n",
            "  3.49456072e-03 2.56395340e-03 1.57552958e-03 3.43173742e-04\n",
            "  3.52084637e-04 4.28587198e-04 1.59895420e-03 3.64065170e-03\n",
            "  1.38459504e-02 2.89547741e-02 3.38164568e-02 2.57871151e-02\n",
            "  2.31835544e-02 4.78689075e-02 1.39484823e-01 5.41393042e-01\n",
            "  8.68209004e-01 9.51728225e-01 9.70624268e-01 9.65345025e-01\n",
            "  8.73991191e-01 7.58269489e-01 7.88741052e-01 8.60117555e-01\n",
            "  7.31379151e-01 3.33830774e-01 9.41864848e-02 1.01450384e-02\n",
            "  2.57140398e-03 9.35792923e-04 1.25536323e-03 4.45783138e-04\n",
            "  4.24683094e-04 6.16192818e-04 1.24976039e-03 4.98646498e-03\n",
            "  1.81997716e-02 2.59634852e-02 2.13894546e-02 1.36347115e-02\n",
            "  1.91293955e-02 5.57607114e-02 1.79818064e-01 5.18336535e-01\n",
            "  7.13591576e-01 8.56039047e-01 8.25458407e-01 5.28524637e-01\n",
            "  3.91889304e-01 2.52471626e-01 3.34808767e-01 7.47286797e-01\n",
            "  7.34144211e-01 3.64923626e-01 4.02911007e-02 3.82071733e-03\n",
            "  5.07414341e-04 6.76810741e-04 6.50376081e-04 3.41922045e-04\n",
            "  3.36140394e-04 7.11321831e-04 1.45110488e-03 7.78099895e-03\n",
            "  1.90556347e-02 8.01834464e-03 9.07963514e-03 9.11656022e-03\n",
            "  8.03181529e-03 2.13818848e-02 6.51060641e-02 2.33337164e-01\n",
            "  1.93290949e-01 2.39103645e-01 2.31653214e-01 1.15195751e-01\n",
            "  6.83631003e-02 1.22588158e-01 3.94693971e-01 8.10428262e-01\n",
            "  8.42759371e-01 3.69622529e-01 3.26448977e-02 3.51202488e-03\n",
            "  4.87595797e-04 4.70280647e-04 5.29587269e-04 3.40521336e-04\n",
            "  3.65465879e-04 6.28679991e-04 2.29677558e-03 8.77115130e-03\n",
            "  6.69535995e-03 8.09231400e-03 2.22370028e-03 1.56369805e-03\n",
            "  2.52532959e-03 7.78776407e-03 1.96181536e-02 4.31725085e-02\n",
            "  5.05838692e-02 9.35562253e-02 9.52493250e-02 7.39079118e-02\n",
            "  7.41514862e-02 2.93570578e-01 5.57224691e-01 8.55607808e-01\n",
            "  8.43473017e-01 1.76636815e-01 1.14482641e-02 1.24245882e-03\n",
            "  4.24712896e-04 8.72015953e-04 6.45011663e-04 4.81605530e-04\n",
            "  3.11911106e-04 9.59813595e-04 2.45079398e-03 2.07334757e-03\n",
            "  5.04913926e-03 2.85333395e-03 5.70416451e-04 5.96076250e-04\n",
            "  9.02831554e-04 3.68693471e-03 1.12853050e-02 6.43326342e-02\n",
            "  1.46401852e-01 2.51642227e-01 2.74872094e-01 1.51687413e-01\n",
            "  4.08248842e-01 6.39967084e-01 7.30842352e-01 9.21985388e-01\n",
            "  5.52179813e-01 7.11613595e-02 1.49276853e-03 2.19106674e-04\n",
            "  2.12907791e-04 7.56591558e-04 6.72668219e-04 3.39835882e-04\n",
            "  3.07410955e-04 4.15712595e-04 8.95231962e-04 1.54033303e-03\n",
            "  1.72954798e-03 3.53902578e-04 3.06785107e-04 2.64406204e-04\n",
            "  3.69340181e-04 4.02739644e-03 6.41807020e-02 5.99672616e-01\n",
            "  6.81328654e-01 7.27457762e-01 5.49127281e-01 7.60416031e-01\n",
            "  7.76053488e-01 7.91616917e-01 9.07419086e-01 8.82702351e-01\n",
            "  3.68049830e-01 1.54663920e-02 4.25338745e-04 7.56842637e-05\n",
            "  7.53187778e-05 4.84228134e-04 4.55230474e-04 3.23653221e-04\n",
            "  3.05652618e-04 5.20259142e-04 1.13055110e-03 1.06278062e-03\n",
            "  5.65409660e-04 3.47852707e-04 1.23888254e-04 2.17527151e-04\n",
            "  6.09695911e-04 7.79512525e-03 4.01038766e-01 8.57547045e-01\n",
            "  9.33419228e-01 8.92887473e-01 8.65310073e-01 8.69431496e-01\n",
            "  8.49151492e-01 8.97289038e-01 8.85189772e-01 7.88842499e-01\n",
            "  2.18494415e-01 1.76069140e-03 1.16436378e-04 3.32904565e-05\n",
            "  3.35168588e-05 3.25292349e-04 2.92897224e-04 3.55720520e-04\n",
            "  2.75760889e-04 2.75403261e-04 4.43398952e-04 1.12137198e-03\n",
            "  4.14967537e-04 1.78217888e-04 1.06899497e-04 2.96741724e-04\n",
            "  1.71557069e-03 2.35462189e-02 4.59403306e-01 9.13782239e-01\n",
            "  9.23829436e-01 7.48397827e-01 7.46611118e-01 7.22127914e-01\n",
            "  8.23584974e-01 8.69761586e-01 8.81130159e-01 6.05810702e-01\n",
            "  4.34451997e-02 1.02731586e-03 7.22713448e-05 1.87939750e-05\n",
            "  2.41539074e-05 1.11729038e-04 4.22984362e-04 3.40193510e-04\n",
            "  5.13106585e-04 4.06593084e-04 6.68406487e-04 1.00320578e-03\n",
            "  1.10271573e-03 1.96635723e-04 1.69873238e-04 6.54518604e-04\n",
            "  2.17980146e-03 2.20839083e-02 2.21911043e-01 3.15917194e-01\n",
            "  4.83191133e-01 4.04494435e-01 5.04852653e-01 3.60955238e-01\n",
            "  5.10994315e-01 7.23329425e-01 8.39811444e-01 4.41407830e-01\n",
            "  1.85598135e-02 7.13020563e-04 6.34242824e-05 1.55589696e-05\n",
            "  1.12985217e-05 9.64797218e-05 5.12063503e-04 3.15696001e-04\n",
            "  3.81618738e-04 3.33130360e-04 6.08444214e-04 2.73343921e-03\n",
            "  2.24906206e-03 7.39634037e-04 9.40889120e-04 2.36526132e-03\n",
            "  4.03320789e-03 2.34152377e-02 6.08328283e-02 8.61032009e-02\n",
            "  8.52031410e-02 1.61065698e-01 1.44714564e-01 2.47261643e-01\n",
            "  1.94998711e-01 5.00945210e-01 6.59940720e-01 4.25119311e-01\n",
            "  1.79371238e-02 1.07592344e-03 1.56670809e-04 5.20584254e-05\n",
            "  2.52264399e-05 2.21699476e-04 3.00198793e-04 4.29898500e-04\n",
            "  3.10301781e-04 3.24487686e-04 1.30861998e-03 1.42531693e-02\n",
            "  8.53475928e-03 9.00408626e-03 5.34924865e-03 4.33802605e-03\n",
            "  4.69064713e-03 7.66721368e-03 2.95130610e-02 2.91473269e-02\n",
            "  3.32643986e-02 1.64687842e-01 2.13469118e-01 2.13681400e-01\n",
            "  2.08519369e-01 5.60451269e-01 6.36641145e-01 2.59084582e-01\n",
            "  1.75106525e-02 1.88204646e-03 5.18590212e-04 1.87426805e-04\n",
            "  1.10336616e-04 4.63187695e-04 6.27726316e-04 4.99755144e-04\n",
            "  3.29732895e-04 2.97099352e-04 3.32394242e-03 4.50944901e-02\n",
            "  5.69242239e-02 3.45307291e-02 2.72771418e-02 1.28152370e-02\n",
            "  1.17999911e-02 2.14547217e-02 2.33834088e-02 4.37677205e-02\n",
            "  7.16774464e-02 1.85589164e-01 1.85593665e-01 1.10659122e-01\n",
            "  2.53304601e-01 4.10573930e-01 6.38349593e-01 1.94988549e-01\n",
            "  1.06556416e-02 2.07665563e-03 6.60479069e-04 4.03910875e-04\n",
            "  2.22831964e-04 5.20169735e-04 1.04847550e-03 4.38272953e-04\n",
            "  4.29958105e-04 4.45425510e-04 7.05888867e-03 1.24315411e-01\n",
            "  1.37676865e-01 1.70707196e-01 8.04665387e-02 4.32364643e-02\n",
            "  5.33913672e-02 5.74320555e-02 6.12474680e-02 1.01953387e-01\n",
            "  7.75524676e-02 4.76644337e-02 5.21708727e-02 1.15864128e-01\n",
            "  2.39298970e-01 6.74801230e-01 5.79835355e-01 1.40660495e-01\n",
            "  1.62584186e-02 2.22679973e-03 4.64171171e-04 6.37948513e-04\n",
            "  7.20858574e-04 8.91089439e-04 9.92298126e-04 2.92301178e-04\n",
            "  3.53336334e-04 5.07175922e-04 1.07538998e-02 3.13249677e-01\n",
            "  6.63171947e-01 3.59935701e-01 3.31576169e-01 3.19543004e-01\n",
            "  2.78854102e-01 2.14842707e-01 1.01293862e-01 1.25194490e-01\n",
            "  4.19766903e-02 1.86503232e-02 2.41451859e-02 1.32501394e-01\n",
            "  6.38401270e-01 7.80714452e-01 4.85922188e-01 6.08083308e-02\n",
            "  8.76775384e-03 2.05826759e-03 2.20197439e-03 1.72322989e-03\n",
            "  9.39428806e-04 9.70512629e-04 1.15814805e-03 3.35335732e-04\n",
            "  5.13315201e-04 4.77403402e-04 7.26184249e-03 3.43097955e-01\n",
            "  5.78926742e-01 6.13743961e-01 6.98346913e-01 6.62349164e-01\n",
            "  4.45829511e-01 1.81471795e-01 1.08984798e-01 7.47085512e-02\n",
            "  3.22282612e-02 2.25838423e-02 1.36533588e-01 4.18765187e-01\n",
            "  6.63780451e-01 6.61612272e-01 1.94707215e-01 4.59280610e-02\n",
            "  7.08809495e-03 1.12554431e-03 1.30358338e-03 2.64894962e-03\n",
            "  2.22206116e-03 1.18520856e-03 7.54177570e-04 1.87307596e-04\n",
            "  2.62647867e-04 2.82406807e-04 3.11848521e-03 1.69385135e-01\n",
            "  4.32448566e-01 6.50277317e-01 7.25202084e-01 7.49420702e-01\n",
            "  6.88749909e-01 6.25915051e-01 5.02831697e-01 2.58828521e-01\n",
            "  1.36878163e-01 1.89621001e-01 3.92537385e-01 7.16597319e-01\n",
            "  6.66700661e-01 3.29238594e-01 6.73830509e-02 1.94695294e-02\n",
            "  4.42498922e-03 4.26167250e-03 1.76393986e-03 2.25904584e-03\n",
            "  1.57785416e-03 1.33034587e-03 3.75956297e-04 3.42279673e-04\n",
            "  3.32742929e-04 3.60459089e-04 9.46462154e-04 2.32850909e-02\n",
            "  1.60174042e-01 5.17605662e-01 7.84898520e-01 8.13769996e-01\n",
            "  8.55943203e-01 8.45137775e-01 8.54498088e-01 5.87442398e-01\n",
            "  3.52827370e-01 5.30460477e-01 7.28604794e-01 4.87490565e-01\n",
            "  3.58778834e-01 7.29335845e-02 2.86915898e-02 9.54997540e-03\n",
            "  2.41866708e-03 2.39798427e-03 1.43578649e-03 1.40014291e-03\n",
            "  6.42091036e-04 4.02837992e-04 3.45528126e-04 3.26275826e-04\n",
            "  3.86565924e-04 3.01063061e-04 3.82244587e-04 1.66314840e-03\n",
            "  1.89734995e-02 1.74555868e-01 4.92798865e-01 6.21614695e-01\n",
            "  7.96534777e-01 7.99081802e-01 6.25576019e-01 3.42066169e-01\n",
            "  3.22769225e-01 2.53575325e-01 2.61968553e-01 2.56007046e-01\n",
            "  1.24977380e-01 3.56636047e-02 1.12578571e-02 3.81714106e-03\n",
            "  1.36786699e-03 7.83056021e-04 7.97182322e-04 4.81992960e-04\n",
            "  6.24030828e-04 4.17679548e-04 4.31150198e-04 4.49001789e-04\n",
            "  2.54034996e-04 4.76807356e-04 4.66018915e-04 3.33636999e-04\n",
            "  1.49232149e-03 5.72028756e-03 1.81954205e-02 4.40378785e-02\n",
            "  5.75605631e-02 2.87491083e-02 2.05253959e-02 1.93621814e-02\n",
            "  1.72968507e-02 1.40211582e-02 2.71129608e-02 4.18168306e-02\n",
            "  1.89591348e-02 5.22673130e-03 2.72366405e-03 1.39650702e-03\n",
            "  8.30739737e-04 6.63220882e-04 6.08503819e-04 4.92215157e-04\n",
            "  3.55690718e-04 4.03225422e-04 3.30299139e-04 3.46273184e-04\n",
            "  2.54154205e-04 3.22967768e-04 3.49879265e-04 3.03417444e-04\n",
            "  4.08738852e-04 1.29097700e-03 2.03737617e-03 3.52624059e-03\n",
            "  1.17385387e-03 8.34137201e-04 1.78268552e-03 9.26405191e-04\n",
            "  8.81552696e-04 1.13648176e-03 1.75914168e-03 1.92981958e-03\n",
            "  3.81496549e-03 1.89968944e-03 1.30745769e-03 9.54449177e-04\n",
            "  3.61591578e-04 4.71144915e-04 6.36875629e-04 3.62902880e-04\n",
            "  4.61131334e-04 3.02702188e-04 2.77996063e-04 2.48968601e-04\n",
            "  3.94344330e-04 4.72128391e-04 3.71456146e-04 3.16500664e-04\n",
            "  2.31921673e-04 4.24683094e-04 4.78357077e-04 6.45756721e-04\n",
            "  7.36355782e-04 1.28409266e-03 9.41514969e-04 9.42975283e-04\n",
            "  6.85125589e-04 7.62850046e-04 9.40561295e-04 1.24546885e-03\n",
            "  1.19546056e-03 2.04876065e-03 7.89463520e-04 4.58747149e-04\n",
            "  4.34279442e-04 2.88039446e-04 3.65048647e-04 3.93927097e-04\n",
            "  2.48968601e-04 4.40180302e-04 2.41667032e-04 2.83539295e-04]], shape=(1, 784), dtype=float32)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "img = Image.fromarray(tile_raster_images(X=vv1_p.numpy(), img_shape=(28, 28),tile_shape=(1, 1), tile_spacing=(1, 1)))\n",
        "plt.rcParams['figure.figsize'] = (4.0, 4.0)\n",
        "imgplot = plt.imshow(img)\n",
        "imgplot.set_cmap('gray') "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "cN9i0lUafOUx",
        "outputId": "085b6037-19ae-4a33-bff9-a599ff78e81a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 288x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}